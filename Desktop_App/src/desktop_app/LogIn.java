/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desktop_app;
import com.github.cassandra.jdbc.internal.datastax.driver.core.BoundStatement;
import com.github.cassandra.jdbc.internal.datastax.driver.core.Cluster;
import com.github.cassandra.jdbc.internal.datastax.driver.core.PreparedStatement;
import com.github.cassandra.jdbc.internal.datastax.driver.core.ResultSet;
import com.github.cassandra.jdbc.internal.datastax.driver.core.Row;
import com.github.cassandra.jdbc.internal.datastax.driver.core.Session;
import com.github.cassandra.jdbc.internal.datastax.driver.core.SimpleStatement;
import com.github.cassandra.jdbc.internal.datastax.driver.core.querybuilder.QueryBuilder;
import static com.github.cassandra.jdbc.internal.datastax.driver.core.querybuilder.QueryBuilder.eq;
import com.github.cassandra.jdbc.internal.datastax.driver.core.querybuilder.Update;
import com.github.cassandra.jdbc.internal.google.common.collect.Maps;
import com.github.cassandra.jdbc.internal.google.common.reflect.TypeToken;
import com.github.cassandra.jdbc.internal.jsqlparser.statement.Statement;
import java.security.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ramon
 */
public class LogIn extends javax.swing.JFrame {

    /**
     * Creates new form LogIn
     */
    public LogIn() {
        initComponents();
        setLocationRelativeTo(null);
        
//        CQL_OPERACIONES.IniciarConnection();
//        CQL_OPERACIONES.IniciarSession("proyecto");
//        CQL_OPERACIONES.insertAlumnos(1, "12345", "maria34", "Maria");
//        CQL_OPERACIONES.endConnection();
        
        //connect cluster and session
        
        
        //inserting practice
        //session.execute("INSERT INTO clase (idClase, nombreClase) VALUES (1, 'Ingles')");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_registro = new javax.swing.JDialog();
        jb_regresar_registro = new javax.swing.JButton();
        jb_registrar_registro = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tf_nombres_registrar = new javax.swing.JTextField();
        tf_apellidos_registrar = new javax.swing.JTextField();
        tf_username_registrar = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jp_contrasena_registro = new javax.swing.JPasswordField();
        jp_contrasenaConfirm_registro = new javax.swing.JPasswordField();
        jd_admin = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_clases_admin = new javax.swing.JTable();
        jb_agregarClase_admin = new javax.swing.JButton();
        jd_alumno = new javax.swing.JDialog();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jt_examenesAlumno = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jt_misCalificaciones = new javax.swing.JTable();
        jd_AgregarClase = new javax.swing.JDialog();
        jLabel8 = new javax.swing.JLabel();
        tf_nombreClase_admin = new javax.swing.JTextField();
        jb_ConfirmarAgregarClase_admin = new javax.swing.JButton();
        jb_regresarAadmin = new javax.swing.JButton();
        jpm_opcionesClase_admin = new javax.swing.JPopupMenu();
        jm_agregarPregunta = new javax.swing.JMenuItem();
        jm_verPreguntas = new javax.swing.JMenuItem();
        jm_CrearExamen = new javax.swing.JMenuItem();
        jm_mostrarExamen = new javax.swing.JMenuItem();
        jd_crearPregunta_admin = new javax.swing.JDialog();
        jb_crearPregunta = new javax.swing.JButton();
        jb_regresarAadmin_p = new javax.swing.JButton();
        jl_className = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        rb_verdadero_admin = new javax.swing.JRadioButton();
        rb_falso_admin = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        tf_tituloPregunta_admin = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_descripcion_admin = new javax.swing.JTextArea();
        jd_crearExamen_admin = new javax.swing.JDialog();
        jb_regresarAadmin_CE = new javax.swing.JButton();
        jb_crearExamen = new javax.swing.JButton();
        jp_cantPreguntas_admin = new javax.swing.JSpinner();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jl_nombreClae_Examen_admin = new javax.swing.JLabel();
        jdc_fechaAplicaciónAdmin = new com.toedter.calendar.JDateChooser();
        jLabel19 = new javax.swing.JLabel();
        jd_mostrarExamen = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ta_infoExamen_admin = new javax.swing.JTextArea();
        bg_respuesta_admin = new javax.swing.ButtonGroup();
        jd_mostrarPreguntas = new javax.swing.JDialog();
        jb_regresarAadmin_preguntas = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jl_preguntasClase = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jt_showPreguntas = new javax.swing.JTable();
        jd_hacerExamen = new javax.swing.JDialog();
        jLabel18 = new javax.swing.JLabel();
        jl_mostrarTitulo_Pregunta = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        ta_mostrarContenidoPregunta = new javax.swing.JTextArea();
        jb_siguiente = new javax.swing.JButton();
        rb_RespuestaEnExamenV = new javax.swing.JRadioButton();
        rb_respuestaEnExamenF = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        bg_respuestasAlumno = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tf_login_username = new javax.swing.JTextField();
        jb_login_iniciarS = new javax.swing.JButton();
        jb_login_registrarse = new javax.swing.JButton();
        jp_contrasena_login = new javax.swing.JPasswordField();

        jd_registro.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jb_regresar_registro.setText("Regresar");
        jb_regresar_registro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresar_registroMouseClicked(evt);
            }
        });

        jb_registrar_registro.setText("Registrar");
        jb_registrar_registro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_registrar_registroMouseClicked(evt);
            }
        });

        jLabel3.setText("Nombres:");

        jLabel4.setText("Apellidos:");

        jLabel5.setText("Usuario:");

        jLabel6.setText("Contraseña:");

        jLabel9.setText("Confirmar Contraseña");

        javax.swing.GroupLayout jd_registroLayout = new javax.swing.GroupLayout(jd_registro.getContentPane());
        jd_registro.getContentPane().setLayout(jd_registroLayout);
        jd_registroLayout.setHorizontalGroup(
            jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_registroLayout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jd_registroLayout.createSequentialGroup()
                            .addComponent(jb_registrar_registro)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                            .addComponent(jb_regresar_registro))
                        .addComponent(tf_nombres_registrar, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tf_apellidos_registrar, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tf_username_registrar, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jp_contrasena_registro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jp_contrasenaConfirm_registro, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(177, Short.MAX_VALUE))
        );
        jd_registroLayout.setVerticalGroup(
            jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_registroLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tf_nombres_registrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tf_apellidos_registrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_username_registrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jp_contrasena_registro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jp_contrasenaConfirm_registro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jd_registroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_registrar_registro)
                    .addComponent(jb_regresar_registro))
                .addGap(37, 37, 37))
        );

        jd_admin.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jd_admin.setTitle("MENÚ PRINCIPAL ADMINISTRADOR");

        jt_clases_admin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre de la Clase"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jt_clases_admin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_clases_adminMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_clases_admin);

        jb_agregarClase_admin.setText("Agregar una Clase");
        jb_agregarClase_admin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_agregarClase_adminMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_adminLayout = new javax.swing.GroupLayout(jd_admin.getContentPane());
        jd_admin.getContentPane().setLayout(jd_adminLayout);
        jd_adminLayout.setHorizontalGroup(
            jd_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_adminLayout.createSequentialGroup()
                .addGroup(jd_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_adminLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_adminLayout.createSequentialGroup()
                        .addGap(253, 253, 253)
                        .addComponent(jb_agregarClase_admin)))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jd_adminLayout.setVerticalGroup(
            jd_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_adminLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(jb_agregarClase_admin)
                .addGap(23, 23, 23))
        );

        jd_alumno.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jd_alumno.setTitle("PERFIL ALUMNO");

        jt_examenesAlumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID EXAMEN", "CLASE", "N° PREGUNTAS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jt_examenesAlumno);

        jButton2.setText("HACER EXAMEN");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(jButton2)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("EXAMENES", jPanel1);

        jt_misCalificaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID EXAMEN", "CLASE", "CALIFICACIÓN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jt_misCalificaciones);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("MIS EXAMENES", jPanel2);

        javax.swing.GroupLayout jd_alumnoLayout = new javax.swing.GroupLayout(jd_alumno.getContentPane());
        jd_alumno.getContentPane().setLayout(jd_alumnoLayout);
        jd_alumnoLayout.setHorizontalGroup(
            jd_alumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4)
        );
        jd_alumnoLayout.setVerticalGroup(
            jd_alumnoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4)
        );

        jLabel8.setText("Nombre de la Clase:");

        jb_ConfirmarAgregarClase_admin.setText("Agregar");
        jb_ConfirmarAgregarClase_admin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_ConfirmarAgregarClase_adminMouseClicked(evt);
            }
        });

        jb_regresarAadmin.setText("Regresar");
        jb_regresarAadmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresarAadminMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_AgregarClaseLayout = new javax.swing.GroupLayout(jd_AgregarClase.getContentPane());
        jd_AgregarClase.getContentPane().setLayout(jd_AgregarClaseLayout);
        jd_AgregarClaseLayout.setHorizontalGroup(
            jd_AgregarClaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_AgregarClaseLayout.createSequentialGroup()
                .addGroup(jd_AgregarClaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_AgregarClaseLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(tf_nombreClase_admin, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_AgregarClaseLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jb_ConfirmarAgregarClase_admin)
                        .addGap(72, 72, 72)
                        .addComponent(jb_regresarAadmin)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jd_AgregarClaseLayout.setVerticalGroup(
            jd_AgregarClaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_AgregarClaseLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jd_AgregarClaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(tf_nombreClase_admin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jd_AgregarClaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_ConfirmarAgregarClase_admin)
                    .addComponent(jb_regresarAadmin))
                .addGap(49, 49, 49))
        );

        jm_agregarPregunta.setText("Crear Pregunta");
        jm_agregarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_agregarPreguntaActionPerformed(evt);
            }
        });
        jpm_opcionesClase_admin.add(jm_agregarPregunta);

        jm_verPreguntas.setText("Mostrar Preguntas");
        jm_verPreguntas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_verPreguntasActionPerformed(evt);
            }
        });
        jpm_opcionesClase_admin.add(jm_verPreguntas);

        jm_CrearExamen.setText("Crear Examen");
        jm_CrearExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_CrearExamenActionPerformed(evt);
            }
        });
        jpm_opcionesClase_admin.add(jm_CrearExamen);

        jm_mostrarExamen.setText("Mostrar Examen");
        jm_mostrarExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jm_mostrarExamenActionPerformed(evt);
            }
        });
        jpm_opcionesClase_admin.add(jm_mostrarExamen);

        jb_crearPregunta.setText("Crear Pregunta");
        jb_crearPregunta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_crearPreguntaMouseClicked(evt);
            }
        });

        jb_regresarAadmin_p.setText("Regresar");
        jb_regresarAadmin_p.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresarAadmin_pMouseClicked(evt);
            }
        });

        jl_className.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jl_className.setText("jLabel7");

        jLabel7.setText("Titulo:");

        jLabel10.setText("Descripción:");

        bg_respuesta_admin.add(rb_verdadero_admin);
        rb_verdadero_admin.setText("V");

        bg_respuesta_admin.add(rb_falso_admin);
        rb_falso_admin.setText("F");

        jLabel11.setText("Respuesta:");

        ta_descripcion_admin.setColumns(20);
        ta_descripcion_admin.setRows(5);
        jScrollPane2.setViewportView(ta_descripcion_admin);

        javax.swing.GroupLayout jd_crearPregunta_adminLayout = new javax.swing.GroupLayout(jd_crearPregunta_admin.getContentPane());
        jd_crearPregunta_admin.getContentPane().setLayout(jd_crearPregunta_adminLayout);
        jd_crearPregunta_adminLayout.setHorizontalGroup(
            jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_crearPregunta_adminLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jb_crearPregunta)
                .addGap(64, 64, 64)
                .addComponent(jb_regresarAadmin_p)
                .addGap(65, 65, 65))
            .addGroup(jd_crearPregunta_adminLayout.createSequentialGroup()
                .addGroup(jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_crearPregunta_adminLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jd_crearPregunta_adminLayout.createSequentialGroup()
                                .addComponent(rb_verdadero_admin)
                                .addGap(18, 18, 18)
                                .addComponent(rb_falso_admin))
                            .addComponent(tf_tituloPregunta_admin, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jd_crearPregunta_adminLayout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addComponent(jl_className)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jd_crearPregunta_adminLayout.setVerticalGroup(
            jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_crearPregunta_adminLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jl_className)
                .addGap(42, 42, 42)
                .addGroup(jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(tf_tituloPregunta_admin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_crearPregunta_adminLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel10))
                    .addGroup(jd_crearPregunta_adminLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addGroup(jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(rb_verdadero_admin)
                    .addComponent(rb_falso_admin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jd_crearPregunta_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_crearPregunta)
                    .addComponent(jb_regresarAadmin_p))
                .addGap(21, 21, 21))
        );

        jd_crearExamen_admin.setTitle("Crear Examen");

        jb_regresarAadmin_CE.setText("Regresar");
        jb_regresarAadmin_CE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresarAadmin_CEMouseClicked(evt);
            }
        });

        jb_crearExamen.setText("Crear Examen");
        jb_crearExamen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_crearExamenMouseClicked(evt);
            }
        });

        jLabel12.setText("Número de Preguntas:");

        jLabel13.setText("Examen para la Clase de:");

        jl_nombreClae_Examen_admin.setText("jLabel14");

        jLabel19.setText("Fecha de Aplicación:");

        javax.swing.GroupLayout jd_crearExamen_adminLayout = new javax.swing.GroupLayout(jd_crearExamen_admin.getContentPane());
        jd_crearExamen_admin.getContentPane().setLayout(jd_crearExamen_adminLayout);
        jd_crearExamen_adminLayout.setHorizontalGroup(
            jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_crearExamen_adminLayout.createSequentialGroup()
                .addGroup(jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jd_crearExamen_adminLayout.createSequentialGroup()
                            .addGap(129, 129, 129)
                            .addComponent(jb_crearExamen)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jb_regresarAadmin_CE))
                        .addGroup(jd_crearExamen_adminLayout.createSequentialGroup()
                            .addGap(157, 157, 157)
                            .addGroup(jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel12)
                                .addComponent(jLabel19))
                            .addGap(45, 45, 45)
                            .addGroup(jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jdc_fechaAplicaciónAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jp_cantPreguntas_admin, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jd_crearExamen_adminLayout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel13)
                        .addGap(27, 27, 27)
                        .addComponent(jl_nombreClae_Examen_admin)))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        jd_crearExamen_adminLayout.setVerticalGroup(
            jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_crearExamen_adminLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jl_nombreClae_Examen_admin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addGroup(jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jp_cantPreguntas_admin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_crearExamen_adminLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(31, 31, 31)
                        .addGroup(jd_crearExamen_adminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jb_crearExamen)
                            .addComponent(jb_regresarAadmin_CE)))
                    .addComponent(jdc_fechaAplicaciónAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74))
        );

        jButton1.setText("Aceptar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jLabel14.setText("ID del Examen:");

        jLabel15.setText("ID de la Clase:");

        jLabel16.setText("Cantidad de Preguntas:");

        ta_infoExamen_admin.setEditable(false);
        ta_infoExamen_admin.setColumns(20);
        ta_infoExamen_admin.setRows(5);
        jScrollPane3.setViewportView(ta_infoExamen_admin);

        javax.swing.GroupLayout jd_mostrarExamenLayout = new javax.swing.GroupLayout(jd_mostrarExamen.getContentPane());
        jd_mostrarExamen.getContentPane().setLayout(jd_mostrarExamenLayout);
        jd_mostrarExamenLayout.setHorizontalGroup(
            jd_mostrarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_mostrarExamenLayout.createSequentialGroup()
                .addGroup(jd_mostrarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_mostrarExamenLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(jd_mostrarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_mostrarExamenLayout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(jButton1)))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jd_mostrarExamenLayout.setVerticalGroup(
            jd_mostrarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_mostrarExamenLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(jd_mostrarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jd_mostrarExamenLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(23, 23, 23))
        );

        jd_mostrarPreguntas.setTitle("PREGUNTAS DE LA CLASE");

        jb_regresarAadmin_preguntas.setText("Aceptar");
        jb_regresarAadmin_preguntas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_regresarAadmin_preguntasMouseClicked(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("PREGUNTAS DE:");

        jl_preguntasClase.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jl_preguntasClase.setText("jLabel18");

        jt_showPreguntas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TITULO", "DESCRIPCION", "RESPUESTA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jt_showPreguntas);

        javax.swing.GroupLayout jd_mostrarPreguntasLayout = new javax.swing.GroupLayout(jd_mostrarPreguntas.getContentPane());
        jd_mostrarPreguntas.getContentPane().setLayout(jd_mostrarPreguntasLayout);
        jd_mostrarPreguntasLayout.setHorizontalGroup(
            jd_mostrarPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_mostrarPreguntasLayout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jLabel17)
                .addGap(50, 50, 50)
                .addComponent(jl_preguntasClase)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_mostrarPreguntasLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jd_mostrarPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_mostrarPreguntasLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_mostrarPreguntasLayout.createSequentialGroup()
                        .addComponent(jb_regresarAadmin_preguntas)
                        .addGap(291, 291, 291))))
        );
        jd_mostrarPreguntasLayout.setVerticalGroup(
            jd_mostrarPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_mostrarPreguntasLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jd_mostrarPreguntasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jl_preguntasClase))
                .addGap(46, 46, 46)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jb_regresarAadmin_preguntas)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jd_hacerExamen.setTitle("EXAMEN");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setText("¡ÉXITO!");

        jl_mostrarTitulo_Pregunta.setText("jLabel19");

        ta_mostrarContenidoPregunta.setEditable(false);
        ta_mostrarContenidoPregunta.setColumns(20);
        ta_mostrarContenidoPregunta.setRows(5);
        jScrollPane6.setViewportView(ta_mostrarContenidoPregunta);

        jb_siguiente.setText("Siguiente");
        jb_siguiente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_siguienteMouseClicked(evt);
            }
        });

        bg_respuestasAlumno.add(rb_RespuestaEnExamenV);
        rb_RespuestaEnExamenV.setText("V");

        bg_respuestasAlumno.add(rb_respuestaEnExamenF);
        rb_respuestaEnExamenF.setText("F");

        jButton3.setText("Iniciar Examen");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_hacerExamenLayout = new javax.swing.GroupLayout(jd_hacerExamen.getContentPane());
        jd_hacerExamen.getContentPane().setLayout(jd_hacerExamenLayout);
        jd_hacerExamenLayout.setHorizontalGroup(
            jd_hacerExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_hacerExamenLayout.createSequentialGroup()
                .addGroup(jd_hacerExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_hacerExamenLayout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(jLabel18))
                    .addGroup(jd_hacerExamenLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addGroup(jd_hacerExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rb_RespuestaEnExamenV)
                            .addComponent(rb_respuestaEnExamenF)
                            .addComponent(jl_mostrarTitulo_Pregunta)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jd_hacerExamenLayout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(jButton3)
                        .addGap(53, 53, 53)
                        .addComponent(jb_siguiente)))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jd_hacerExamenLayout.setVerticalGroup(
            jd_hacerExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_hacerExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addGap(38, 38, 38)
                .addComponent(jl_mostrarTitulo_Pregunta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rb_RespuestaEnExamenV)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rb_respuestaEnExamenF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jd_hacerExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_siguiente)
                    .addComponent(jButton3))
                .addGap(28, 28, 28))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LOG-IN");

        jLabel1.setText("Usuario:");

        jLabel2.setText("Contraseña:");

        jb_login_iniciarS.setText("Iniciar Sesión");
        jb_login_iniciarS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_login_iniciarSMouseClicked(evt);
            }
        });

        jb_login_registrarse.setText("Registrarse");
        jb_login_registrarse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_login_registrarseMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tf_login_username, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jp_contrasena_login)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jb_login_iniciarS)
                        .addGap(42, 42, 42)
                        .addComponent(jb_login_registrarse)))
                .addContainerGap(217, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tf_login_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jp_contrasena_login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_login_iniciarS)
                    .addComponent(jb_login_registrarse))
                .addGap(70, 70, 70))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jb_login_registrarseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_login_registrarseMouseClicked
        this.setVisible(false);
        jd_registro.pack();
        jd_registro.setModal(true);
        jd_registro.setLocationRelativeTo(this);
        jd_registro.setVisible(true);
        tf_login_username.setText("");
        jp_contrasena_login.setText("");
        
    }//GEN-LAST:event_jb_login_registrarseMouseClicked

    private void jb_regresar_registroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresar_registroMouseClicked
        tf_nombres_registrar.setText("");
        tf_apellidos_registrar.setText("");
        tf_username_registrar.setText("");
        jp_contrasena_registro.setText("");
        jp_contrasenaConfirm_registro.setText("");
        this.setVisible(true);
        jd_registro.dispose();
        
    }//GEN-LAST:event_jb_regresar_registroMouseClicked

    private void jb_registrar_registroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_registrar_registroMouseClicked
        CQL_OPERACIONES.IniciarConnection();
        CQL_OPERACIONES.IniciarSession("proyecto");
        try {
            String password = SHA(jp_contrasena_registro.getText());
            String passConfirm = SHA(jp_contrasenaConfirm_registro.getText());
            String nombreA = tf_nombres_registrar.getText() + " " + tf_apellidos_registrar.getText();
            String userA = tf_username_registrar.getText();
            int idA = CQL_OPERACIONES.lastID_Alumno();
            if (password.equals(passConfirm)) {
                if (CQL_OPERACIONES.foundUser(userA)) {
                    JOptionPane.showMessageDialog(jd_registro, "El Usuario que Eligió Ya Existe");
                }else{
                    CQL_OPERACIONES.insertAlumnos(idA, password, userA, nombreA);
                    CQL_OPERACIONES.endConnection();
                    JOptionPane.showMessageDialog(jd_registro, "¡Registrado Exitosamente!");
                    tf_nombres_registrar.setText("");
                    tf_apellidos_registrar.setText("");
                    tf_username_registrar.setText("");
                    jp_contrasena_registro.setText("");
                    jp_contrasenaConfirm_registro.setText("");
                    this.setVisible(true);
                    jd_registro.dispose();
                }
            }else{
                JOptionPane.showMessageDialog(jd_registro, "Las Contraseñas no Coinciden");
            }
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jb_registrar_registroMouseClicked

    private void jb_login_iniciarSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_login_iniciarSMouseClicked
        try {
            //    llenado de tabla para el admin sin la base de datos
            
            cluster = Cluster.builder().addContactPoint("127.0.0.1").build();
            session = cluster.connect("proyecto");
            String userLog = tf_login_username.getText();
            String passLog = SHA(jp_contrasena_login.getText());
            boolean resultado = matchInfo(session, userLog, passLog);
            System.out.println(resultado);
            if (resultado) {
                if (userLog.equals("Admin")) {
                    DefaultTableModel modelC1 = (DefaultTableModel)jt_clases_admin.getModel();
                    //llenado de la tabla
                    int idClase;
                    String nombreClase;
                    ResultSet results = session.execute("SELECT * FROM clase");
                    for (Row row : results) {
                        idClase = row.getInt("idclase");
                        nombreClase = row.getString("nombreclase");
                        Object[] newRow = {idClase,nombreClase};
                        modelC1.addRow(newRow);
                    }
                    jt_clases_admin.setModel(modelC1);
                    //end connection
                    session.close();
                    cluster.close();
                    this.setVisible(false);
                    jd_admin.pack();
                    jd_admin.setModal(true);
                    jd_admin.setLocationRelativeTo(this);
                    jd_admin.setVisible(true);
                }else{
                    DefaultTableModel modelExa = (DefaultTableModel)jt_examenesAlumno.getModel();
                    int idExamen, numPreguntasExa,idClase;
                    String clase = "";
                    ResultSet results = session.execute("SELECT * FROM examen");
                    for (Row row : results) {
                        idExamen = row.getInt("ide");
                        numPreguntasExa = row.getInt("num_preguntas");
                        idClase = row.getInt("idclase");
                        ResultSet resultSub = session.execute("SELECT * FROM clase WHERE idclase = " 
                                + idClase + " ALLOW FILTERING");
                        for (Row row1 : resultSub) {
                            clase = row1.getString("nombreclase");
                        }
                        Object[] newRow = {idExamen,clase,numPreguntasExa};
                        modelExa.addRow(newRow);
                    }
                    jt_examenesAlumno.setModel(modelExa);
                    //Parte del llenado de tabla de calificaciones
                    DefaultTableModel modelCali = (DefaultTableModel) jt_misCalificaciones.getModel();
                    idAlumn = matchAlumnoID(session, userLog, passLog);
                    Map<Integer,Integer> resultadosExa = new HashMap<Integer,Integer>();
                    ResultSet resultFind = session.execute("SELECT * FROM alumno WHERE ida = " +
                            idAlumn + " ALLOW FILTERING");
                    for (Row row : resultFind) {
                       resultadosExa = (row.getMap("resultados_examenes", TypeToken.of(Integer.class), TypeToken.of(Integer.class)));
                        
                    }
                    ResultSet resultC;
                    int id_Clase2;
                    String nombreCLass = "";
                    System.out.println("SUPUESTO RESULTADO: "+resultadosExa);
                    //iterador para agarrar los id de los examenes.
                    Iterator iteradorPrueba = resultadosExa.keySet().iterator();
                    while (iteradorPrueba.hasNext()) {
                        int id_examen = (int)iteradorPrueba.next();
                        resultC = session.execute("SELECT * FROM examen WHERE ide = " +
                            id_examen + " ALLOW FILTERING");
                        for (Row row : resultC) {
                            id_Clase2 = row.getInt("idclase");
                            ResultSet busquedaClase = session.execute("SELECT * FROM clase WHERE idclase = " +
                            id_Clase2 + " ALLOW FILTERING");
                            for (Row row1 : busquedaClase) {
                                nombreCLass = row1.getString("nombreclase");
                            }
                        }
                        int calificacion = resultadosExa.get(id_examen);
                        //llenar tabla
                        Object[] newRow = {id_examen,nombreCLass,calificacion};
                        modelCali.addRow(newRow);
                    }
                    
                    //end connection
                    jt_misCalificaciones.setModel(modelCali);
                    session.close();
                    cluster.close();
                    this.setVisible(false);
                    jd_alumno.pack();
                    jd_alumno.setModal(true);
                    jd_alumno.setLocationRelativeTo(this);
                    jd_alumno.setVisible(true);
                }
            }else{
                JOptionPane.showMessageDialog(this, "No Se Encontraron Sus Datos");
            }
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
    
           
        
        
    }//GEN-LAST:event_jb_login_iniciarSMouseClicked

    private void jb_regresarAadminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresarAadminMouseClicked
        
        tf_nombreClase_admin.setText("");
        jd_AgregarClase.dispose();
        jd_admin.setVisible(true);
        
    }//GEN-LAST:event_jb_regresarAadminMouseClicked

    private void jb_agregarClase_adminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_agregarClase_adminMouseClicked
        jd_admin.setVisible(false);
        jd_AgregarClase.pack();
        jd_AgregarClase.setModal(true);
        jd_AgregarClase.setLocationRelativeTo(jd_admin);
        jd_AgregarClase.setVisible(true);
    }//GEN-LAST:event_jb_agregarClase_adminMouseClicked

    private void jt_clases_adminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_clases_adminMouseClicked
        if (evt.isMetaDown()) {
            if (jt_clases_admin.getSelectedRow()>=0) {
                jpm_opcionesClase_admin.show(evt.getComponent(), evt.getX(), evt.getY());
            } 
        }
    }//GEN-LAST:event_jt_clases_adminMouseClicked

    private void jm_agregarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_agregarPreguntaActionPerformed
        //abrir ventana para agregarle una pregunta a la clase
        DefaultTableModel model = (DefaultTableModel)jt_clases_admin.getModel();
        id_clase = (int) model.getValueAt(jt_clases_admin.getSelectedRow(), 0);
        clase = (String) model.getValueAt(jt_clases_admin.getSelectedRow(), 1);
        jl_className.setText(clase);
        rb_verdadero_admin.setSelected(true);
        jd_admin.setVisible(false);
        jd_crearPregunta_admin.pack();
        jd_crearPregunta_admin.setModal(true);
        jd_crearPregunta_admin.setLocationRelativeTo(jd_admin);
        jd_crearPregunta_admin.setVisible(true);
    }//GEN-LAST:event_jm_agregarPreguntaActionPerformed

    private void jm_CrearExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_CrearExamenActionPerformed
        /*abrir ventana con las preguntas del examen en un jlist,
        nombre de la clase, un jspinner o jtext mostrando cuantas lleva y cuál es el límite
        */
        DefaultTableModel model = (DefaultTableModel)jt_clases_admin.getModel();
        id_clase = (int) model.getValueAt(jt_clases_admin.getSelectedRow(), 0);
        clase = (String) model.getValueAt(jt_clases_admin.getSelectedRow(), 1);
        jl_nombreClae_Examen_admin.setText(clase);
        CQL_OPERACIONES.IniciarConnection();
        CQL_OPERACIONES.IniciarSession("proyecto");
        boolean result = CQL_OPERACIONES.ExistsExamen(id_clase);
        System.out.println("RESULTADO EN EL MAIN: " + result);
        if (!result) {
            CQL_OPERACIONES.endConnection();
            jd_admin.setVisible(false);
            jd_crearExamen_admin.pack();
            jd_crearExamen_admin.setModal(true);
            jd_crearExamen_admin.setLocationRelativeTo(jd_admin);
            jd_crearExamen_admin.setVisible(true);
        }else{
            CQL_OPERACIONES.endConnection();
            JOptionPane.showMessageDialog(jd_admin, "Esta Clase Ya Tiene un Examen");
        }
        
    }//GEN-LAST:event_jm_CrearExamenActionPerformed

    private void jm_mostrarExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_mostrarExamenActionPerformed
        //abrir ventana con un jlist enseñando las preguntas del exmamen.
        //validación para ver si tiene examen
        DefaultTableModel model = (DefaultTableModel)jt_clases_admin.getModel();
        id_clase = (int) model.getValueAt(jt_clases_admin.getSelectedRow(), 0);
        clase = (String) model.getValueAt(jt_clases_admin.getSelectedRow(), 1);
        
        CQL_OPERACIONES.IniciarConnection();
        CQL_OPERACIONES.IniciarSession("proyecto");
        
        boolean result = CQL_OPERACIONES.ExistsExamen(id_clase);
        int idE = CQL_OPERACIONES.idExamen(id_clase);
        int cant_preguntas = CQL_OPERACIONES.cantPreguntasExamen(idE);
       
        if (result) {
            CQL_OPERACIONES.endConnection();
            ta_infoExamen_admin.setText(idE + "\n\n" + id_clase +
                    "\n\n" + cant_preguntas);
            jd_admin.setVisible(false);
            jd_mostrarExamen.pack();
            jd_mostrarExamen.setModal(true);
            jd_mostrarExamen.setLocationRelativeTo(jd_admin);
            jd_mostrarExamen.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(jd_admin, "Esta Clase No Tiene Examen");
            CQL_OPERACIONES.endConnection();
        }
        
    }//GEN-LAST:event_jm_mostrarExamenActionPerformed

    private void jb_regresarAadmin_pMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresarAadmin_pMouseClicked
        System.out.println(id_clase + " PRUEBA");
        jd_crearPregunta_admin.dispose();
        jd_admin.setVisible(true);
    }//GEN-LAST:event_jb_regresarAadmin_pMouseClicked

    private void jb_regresarAadmin_CEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresarAadmin_CEMouseClicked
        jp_cantPreguntas_admin.setValue(0);
        jd_crearExamen_admin.dispose();
        jd_admin.setVisible(true);
    }//GEN-LAST:event_jb_regresarAadmin_CEMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        jd_mostrarExamen.dispose();
        jd_admin.setVisible(true);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jb_ConfirmarAgregarClase_adminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_ConfirmarAgregarClase_adminMouseClicked
        cluster = Cluster.builder().addContactPoint("127.0.0.1").build();
        session = cluster.connect("proyecto");
        
        if (tf_nombreClase_admin.getText().isEmpty()) {
            JOptionPane.showMessageDialog(jd_AgregarClase, "No ha Escrito el Nombre de la Clase");
        }else{
            DefaultTableModel modelT = (DefaultTableModel)jt_clases_admin.getModel();
            int idClase = cantidad_datos(session);
            String nombre_clase = tf_nombreClase_admin.getText();
            insertClase(session, idClase, nombre_clase);
            Object[] newRow = {idClase,nombre_clase};
            modelT.addRow(newRow);
            jt_clases_admin.setModel(modelT);
            JOptionPane.showMessageDialog(jd_AgregarClase,"Clase Agregada Exitosamente");
            tf_nombreClase_admin.setText("");
            //end connection
            session.close();
            cluster.close();
            jd_AgregarClase.dispose();
            jd_admin.setVisible(true);
            
        }
    }//GEN-LAST:event_jb_ConfirmarAgregarClase_adminMouseClicked

    private void jb_crearPreguntaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_crearPreguntaMouseClicked
        CQL_OPERACIONES.IniciarConnection();
        CQL_OPERACIONES.IniciarSession("proyecto");
        String tituloP, descripcionP;
        boolean respuestaP;
        int idP = CQL_OPERACIONES.lastID_Pregunta();
        tituloP = tf_tituloPregunta_admin.getText();
        descripcionP = ta_descripcion_admin.getText();
        if (rb_falso_admin.isSelected())
            respuestaP = false;
        else
            respuestaP = true;
        if (tituloP.isEmpty() || descripcionP.isEmpty()) {
            JOptionPane.showMessageDialog(jd_AgregarClase, "Alguno de los Campos está Vacío");
        }else{
            System.out.println(" IDP MAIN:" + idP);
            CQL_OPERACIONES.insertarPregunta(idP, descripcionP, id_clase, respuestaP, tituloP);
            CQL_OPERACIONES.endConnection();
            tf_tituloPregunta_admin.setText("");
            ta_descripcion_admin.setText("");
            rb_verdadero_admin.setSelected(true);
            jd_crearPregunta_admin.dispose();
            jd_admin.setVisible(true);
        }
        
    }//GEN-LAST:event_jb_crearPreguntaMouseClicked

    private void jb_crearExamenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_crearExamenMouseClicked
        CQL_OPERACIONES.IniciarConnection();
        CQL_OPERACIONES.IniciarSession("proyecto");
        int cantidadPreguntas = (int)jp_cantPreguntas_admin.getValue();
        Date fechaAplicación = jdc_fechaAplicaciónAdmin.getDate();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String dateAplication = dateFormat.format(fechaAplicación);
        //souts de prueba
        System.out.println("FECHA:" + dateAplication);
        System.out.println("ID DE LA CLASE EN CREAR PREGUNTAS" + id_clase);
        int preguntasClase = CQL_OPERACIONES.lastID_CantPreguntasClase(id_clase);
        int idExamen = CQL_OPERACIONES.lastID_Examen();
        //validación que las preguntas son menor o igual que las que tiene la clase
        if ((cantidadPreguntas <= preguntasClase) && (cantidadPreguntas >= 1)) {
            CQL_OPERACIONES.insertarExamen(idExamen, id_clase, cantidadPreguntas,dateAplication);
            JOptionPane.showMessageDialog(jd_crearExamen_admin, "¡Examen Creado Exitosamente!");
            jp_cantPreguntas_admin.setValue(0);
            CQL_OPERACIONES.endConnection();
            jd_crearExamen_admin.dispose();
            jd_admin.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(jd_crearExamen_admin, "No se Pudo Crear el Examen \n"
                    + "El Número de Preguntas en el Banco de la Clase es de: " 
                    + preguntasClase);
        }
        
    }//GEN-LAST:event_jb_crearExamenMouseClicked

    private void jm_verPreguntasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jm_verPreguntasActionPerformed
        //validación para ver si la clase tiene preguntas
        DefaultTableModel modelTable = (DefaultTableModel)jt_clases_admin.getModel();
        cluster = Cluster.builder().addContactPoint("127.0.0.1").build();
        session = cluster.connect("proyecto");
        id_clase = (int) modelTable.getValueAt(jt_clases_admin.getSelectedRow(), 0);
        clase = (String) modelTable.getValueAt(jt_clases_admin.getSelectedRow(), 1);
        int counter = 0;
        int idP;
        String titulo, descripcion, respuestaChar;
        boolean respuesta;
        DefaultTableModel model2 = (DefaultTableModel)jt_showPreguntas.getModel();
        ResultSet results = session.execute("SELECT * FROM preguntas WHERE idclase = " + id_clase 
                + " ALLOW FILTERING");
        for (Row row : results) {
            counter++;
            idP = row.getInt("idp");
            titulo = row.getString("titulo");
            descripcion = row.getString("descripcion");
            respuesta = row.getBool("respuesta");
            if (respuesta)
                respuestaChar = "V";
            else
                respuestaChar = "F";
            
            jl_preguntasClase.setText(clase);
            Object[] newRow = {idP,titulo,descripcion,respuesta};
            model2.addRow(newRow);
        }
        jt_showPreguntas.setModel(model2);
        if (counter > 0) {
            
            session.close();
            cluster.close();
            jd_admin.setVisible(false);
            jd_mostrarPreguntas.pack();
            jd_mostrarPreguntas.setModal(true);
            jd_mostrarPreguntas.setLocationRelativeTo(jd_admin);
            jd_mostrarPreguntas.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(jd_admin, "Esta Clase No Tiene Preguntas");
            session.close();
            cluster.close();
            
        }
        
        
    }//GEN-LAST:event_jm_verPreguntasActionPerformed

    private void jb_regresarAadmin_preguntasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_regresarAadmin_preguntasMouseClicked
        jt_showPreguntas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "TITULO", "DESCRIPCION", "RESPUESTA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jd_mostrarPreguntas.dispose();
        jd_admin.setVisible(true);
    }//GEN-LAST:event_jb_regresarAadmin_preguntasMouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        id_ClaseList = new ArrayList<>();
        calificaciónGlobal = 0;
        counterQ = 0;
        cluster = Cluster.builder().addContactPoint("127.0.0.1").build();
        session = cluster.connect("proyecto");
        Map<Integer,Integer> resultadosExamen = new HashMap<Integer,Integer>();
        ResultSet resultFind = session.execute("SELECT * FROM alumno WHERE ida = " +
            idAlumn + " ALLOW FILTERING");
        for (Row row : resultFind) {
            resultadosExamen = (row.getMap("resultados_examenes", TypeToken.of(Integer.class), TypeToken.of(Integer.class)));             
        }
        
        
        
        if (jt_examenesAlumno.getSelectedRow() >= 0) {
            id_ExamenGlobal = (int)jt_examenesAlumno.getValueAt(jt_examenesAlumno.getSelectedRow(), 0);
            Clase_alumno = (String)jt_examenesAlumno.getValueAt(jt_examenesAlumno.getSelectedRow(), 1);
            ResultSet resultCon = session.execute("SELECT * FROM examen WHERE ide = " +
            id_ExamenGlobal + " ALLOW FILTERING");
            for (Row row1 : resultCon) {
                cantidadPreguntasExamenGlobal = row1.getInt("num_preguntas");
            }
            
            if (resultadosExamen.containsKey(id_ExamenGlobal)) {
                JOptionPane.showMessageDialog(jd_alumno, "Usted Ya ha Realizado este Examen");
                session.close();
                cluster.close();
            }else{
                //consulta para seleccionar el id de la clase.
                int id_clase_general = 0;
                ResultSet result = session.execute("SELECT * FROM examen WHERE ide = " +
                id_ExamenGlobal + " ALLOW FILTERING");
                for (Row row1 : result) {
                    id_clase_general = row1.getInt("idclase");
                }
                
                //consulta para seleccionar los id de las preguntas de clase.
                int idClase_consulta;
                ResultSet resultIDCLASS = session.execute("SELECT * FROM preguntas WHERE idclase = " +
                id_clase_general + " ALLOW FILTERING");
                for (Row rowrow : resultIDCLASS) {
                    idClase_consulta = rowrow.getInt("idp");
                    id_ClaseList.add(idClase_consulta);
                }
                Collections.shuffle(id_ClaseList);
                System.out.println(id_ClaseList);
                session.close();
                cluster.close();
                jd_alumno.setVisible(false);
                jd_hacerExamen.pack();
                jd_hacerExamen.setModal(true);
                jd_hacerExamen.setLocationRelativeTo(jd_admin);
                jd_hacerExamen.setVisible(true); 
            }
             
        }else{
            JOptionPane.showMessageDialog(jd_alumno, "Debe Seleccionar un Examen \n"
                    + "       De la tabla");
            session.close();
            cluster.close();
        }
        
    }//GEN-LAST:event_jButton2MouseClicked

    private void jb_siguienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_siguienteMouseClicked
        cluster = Cluster.builder().addContactPoint("127.0.0.1").build();
        session = cluster.connect("proyecto");
        
        
        //consulta para seleccionar la información de la pregunta
        
        
        boolean respuestaP,respuestaA;
        String tituloP,descripciónP;
        
        int idPregunta = id_ClaseList.get(counterQ);
        System.out.println("PRIMER COUNTER: " + counterQ);
        System.out.println("PRIMER ID_PREGUNTA: " + idPregunta);
        ResultSet results2 = session.execute("SELECT * FROM preguntas WHERE idp = " +
            idPregunta + " ALLOW FILTERING");
        
        if ((counterQ < cantidadPreguntasExamenGlobal) && (started == true)) {
            for (Row rowP : results2) {
                tituloP = rowP.getString("titulo");
                descripciónP = rowP.getString("descripcion");
                respuestaP = rowP.getBool("respuesta");
                if (rb_RespuestaEnExamenV.isSelected())
                    respuestaA = true;
                else
                    respuestaA = false;
                jl_mostrarTitulo_Pregunta.setText(tituloP);
                ta_mostrarContenidoPregunta.setText(descripciónP);
                System.out.println("PRUEBA DENTRO DE EXAMEN:" + tituloP + " " + descripciónP);
                if(respuestaA == respuestaP)
                    calificaciónGlobal += 5;
            }
            
            counterQ++;
            System.out.println("SEGUNDO COUNTER: " + counterQ);
            if (counterQ < id_ClaseList.size()) {
                idPregunta = id_ClaseList.get(counterQ);
            }
            System.out.println("SEGUNDO ID:PREGUNTA: " + idPregunta);
            
            ResultSet results3 = session.execute("SELECT * FROM preguntas WHERE idp = " +
            idPregunta + " ALLOW FILTERING");
            for (Row row_1 : results3) {
                tituloP = row_1.getString("titulo");
                descripciónP = row_1.getString("descripcion");
                jl_mostrarTitulo_Pregunta.setText(tituloP);
                ta_mostrarContenidoPregunta.setText(descripciónP);
                rb_RespuestaEnExamenV.setSelected(true);
                
            }
            session.close();
            cluster.close();
        }else{
            JOptionPane.showMessageDialog(jd_hacerExamen, "Todavía No ha Iniciado el Examen");
        }
        
        if (counterQ == cantidadPreguntasExamenGlobal) {
            int total = 5 * cantidadPreguntasExamenGlobal;
            DefaultTableModel modelC = (DefaultTableModel)jt_misCalificaciones.getModel();
            JOptionPane.showMessageDialog(jd_hacerExamen, "EL EXAMEN HA TERMINADO\n"
                    + "Nota: " + calificaciónGlobal + "/" + total);
            
            //consulta para meterlo a la base de datos
            cluster = Cluster.builder().addContactPoint("127.0.0.1").build();
            session = cluster.connect("proyecto");
            session.execute("INSERT INTO CLASE (idclase,nombreclase) VALUES (" + 50 + ",'prueba')");
            insertNota(session, idAlumn, id_ExamenGlobal, calificaciónGlobal);
            //meter datos a la tabla
            Object[] newRow = {id_ExamenGlobal,Clase_alumno,calificaciónGlobal};
            modelC.addRow(newRow);
            jt_misCalificaciones.setModel(modelC);
            ta_mostrarContenidoPregunta.setText("");
            jl_mostrarTitulo_Pregunta.setText("");
            session.close();
            cluster.close();
            counterQ = 0;
            jd_hacerExamen.dispose();
            jd_alumno.setVisible(true);
        }
        
        
        
        
        
    }//GEN-LAST:event_jb_siguienteMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        cluster = Cluster.builder().addContactPoint("127.0.0.1").build();
        session = cluster.connect("proyecto");
        
        boolean respuestaP,respuestaA;
        String tituloP,descripciónP;
        if (counterQ == 0) {
            int idPregunta = id_ClaseList.get(counterQ);
            ResultSet results2 = session.execute("SELECT * FROM preguntas WHERE idp = " +
                idPregunta + " ALLOW FILTERING");
            
            for (Row rowP : results2) {
                tituloP = rowP.getString("titulo");
                descripciónP = rowP.getString("descripcion");
                jl_mostrarTitulo_Pregunta.setText(tituloP);
                ta_mostrarContenidoPregunta.setText(descripciónP);
                rb_RespuestaEnExamenV.setSelected(true);
            } 
            JOptionPane.showMessageDialog(jd_hacerExamen, "¡EL EXAMEN HA EMPEZADO!");
            calificaciónGlobal = 0;
            started = true;
            session.close();
            cluster.close();
            
        }else{
            JOptionPane.showMessageDialog(jd_hacerExamen, "Ya Había Iniciado este Examen");
        }
    }//GEN-LAST:event_jButton3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogIn().setVisible(true);
            }
        });
    }
    
    public String SHA(String password) throws NoSuchAlgorithmException{
        //cadena introducida por el usuario
        byte[] input = password.getBytes();
        //objeto de mensage digerido usando SHA1
        MessageDigest SHA1 = MessageDigest.getInstance("SHA");
        SHA1.update(input);
        byte[] digest = SHA1.digest();
        //conversion a formato hex
        StringBuffer hexaDigest = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            hexaDigest.append(Integer.toString((digest[i]&0xff)+0x100,16).substring(1));
        }
        
        String pass = hexaDigest.toString();
        return pass;
        
    }
    
    //inicio de sesión
    public static boolean matchInfo(Session session, String login, String password){
        boolean flag = false;
        String loginDB = "";
        String passDB = "";
        ResultSet results = session.execute("SELECT * FROM alumno");
        for (Row row : results) {
            loginDB = row.getString("login");
            passDB = row.getString("contrasena");
            if (login.equals(loginDB) && password.equals(passDB)) {
                System.out.println("LOGIN:" + loginDB + " PASSWORD:" + passDB);
                System.out.println("LOGIN MAIN:" + login + " PASSWORD MAIN:" + password);
                flag = true; 
            }
        }
        
        return flag;
    }
    
    public static int matchAlumnoID(Session session, String login, String password){
        
        String loginDB = "";
        String passDB = "";
        int idAlumno = 0;
        ResultSet results = session.execute("SELECT * FROM alumno");
        for (Row row : results) {
            loginDB = row.getString("login");
            passDB = row.getString("contrasena");
            if (login.equals(loginDB) && password.equals(passDB)) {
                idAlumno = row.getInt("ida");
                System.out.println("ID DEL ALUMNO:" + idAlumno);
            }
        }
        
        return idAlumno;
    }
    
    public static int cantidad_datos(Session session) {
       int last = 0;
        ResultSet results = session.execute("SELECT idclase FROM clase");
        for (Row row : results) {
            last++;
        }
        return last;
    }
    
    //añadir a la tabla clase
    public static void insertClase(Session session, int idClase, String nombreClase){
        String insert = "";
        insert += idClase + ",'" + nombreClase + "'";
        session.execute("INSERT INTO CLASE (idclase, nombreclase) VALUES (" + insert + ")");
    }
    
    public static void insertNota(Session session, int idAlumno, int idExamen, int nota){
        
        String query = "UPDATE alumno SET resultados_examenes = resultados_examenes + ";
        query += "{" + idExamen + ":" + nota + "} ";
        query += "WHERE ida = " + idAlumno;
        /*PreparedStatement preparedStatement = session.prepare(query);
        BoundStatement boundStatement = preparedStatement.bind("alumno");
        session.execute(boundStatement);*/
        session.execute(query);
        /*Map<Integer,Integer> map = Maps.newHashMap();
        map.put(idExamen, nota);*/
        //Update update = QueryBuilder.update("proyecto", "alumno");
        
        /*Statement updateMap = (Statement) QueryBuilder.update("alumno").with(QueryBuilder.put("resultados_examenes", idExamen, nota)).where(eq("ida", idAlumno));
        System.out.println(updateMap);
        session.execute((com.github.cassandra.jdbc.internal.datastax.driver.core.Statement) updateMap);*/
        
        /*Update update = QueryBuilder.update("proyecto", "alumno");
        update.with(QueryBuilder.put("resultados_examenes", idExamen, nota)).where(eq("ida", idAlumno));*/
        
        //QueryBuilder.put("resultados_examenes", idExamen, nota);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg_respuesta_admin;
    private javax.swing.ButtonGroup bg_respuestasAlumno;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JButton jb_ConfirmarAgregarClase_admin;
    private javax.swing.JButton jb_agregarClase_admin;
    private javax.swing.JButton jb_crearExamen;
    private javax.swing.JButton jb_crearPregunta;
    private javax.swing.JButton jb_login_iniciarS;
    private javax.swing.JButton jb_login_registrarse;
    private javax.swing.JButton jb_registrar_registro;
    private javax.swing.JButton jb_regresarAadmin;
    private javax.swing.JButton jb_regresarAadmin_CE;
    private javax.swing.JButton jb_regresarAadmin_p;
    private javax.swing.JButton jb_regresarAadmin_preguntas;
    private javax.swing.JButton jb_regresar_registro;
    private javax.swing.JButton jb_siguiente;
    private javax.swing.JDialog jd_AgregarClase;
    private javax.swing.JDialog jd_admin;
    private javax.swing.JDialog jd_alumno;
    private javax.swing.JDialog jd_crearExamen_admin;
    private javax.swing.JDialog jd_crearPregunta_admin;
    private javax.swing.JDialog jd_hacerExamen;
    private javax.swing.JDialog jd_mostrarExamen;
    private javax.swing.JDialog jd_mostrarPreguntas;
    private javax.swing.JDialog jd_registro;
    private com.toedter.calendar.JDateChooser jdc_fechaAplicaciónAdmin;
    private javax.swing.JLabel jl_className;
    private javax.swing.JLabel jl_mostrarTitulo_Pregunta;
    private javax.swing.JLabel jl_nombreClae_Examen_admin;
    private javax.swing.JLabel jl_preguntasClase;
    private javax.swing.JMenuItem jm_CrearExamen;
    private javax.swing.JMenuItem jm_agregarPregunta;
    private javax.swing.JMenuItem jm_mostrarExamen;
    private javax.swing.JMenuItem jm_verPreguntas;
    private javax.swing.JSpinner jp_cantPreguntas_admin;
    private javax.swing.JPasswordField jp_contrasenaConfirm_registro;
    private javax.swing.JPasswordField jp_contrasena_login;
    private javax.swing.JPasswordField jp_contrasena_registro;
    private javax.swing.JPopupMenu jpm_opcionesClase_admin;
    private javax.swing.JTable jt_clases_admin;
    private javax.swing.JTable jt_examenesAlumno;
    private javax.swing.JTable jt_misCalificaciones;
    private javax.swing.JTable jt_showPreguntas;
    private javax.swing.JRadioButton rb_RespuestaEnExamenV;
    private javax.swing.JRadioButton rb_falso_admin;
    private javax.swing.JRadioButton rb_respuestaEnExamenF;
    private javax.swing.JRadioButton rb_verdadero_admin;
    private javax.swing.JTextArea ta_descripcion_admin;
    private javax.swing.JTextArea ta_infoExamen_admin;
    private javax.swing.JTextArea ta_mostrarContenidoPregunta;
    private javax.swing.JTextField tf_apellidos_registrar;
    private javax.swing.JTextField tf_login_username;
    private javax.swing.JTextField tf_nombreClase_admin;
    private javax.swing.JTextField tf_nombres_registrar;
    private javax.swing.JTextField tf_tituloPregunta_admin;
    private javax.swing.JTextField tf_username_registrar;
    // End of variables declaration//GEN-END:variables
Cluster cluster;
Session session;
int id_clase;
String clase;
int id_ExamenGlobal;
int idAlumn;
int cantidadPreguntasExamenGlobal;
ArrayList<Integer> id_ClaseList = new ArrayList<>();
int counterQ = 0;
int calificaciónGlobal = 0;
String Clase_alumno;
boolean started;
}
